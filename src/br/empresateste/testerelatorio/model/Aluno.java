package br.empresateste.testerelatorio.model;

import java.io.*;

 /**
  * Aluno Value Object.
  * This class is value object representing database table aluno
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */


/*
 * Essa classe foi gerada no site do DaoGen (link acima).
 */
public class Aluno implements Cloneable, Serializable {

	private static final long serialVersionUID = 364554717830012093L;
	/** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int idAluno;
    private String nome;
    private String matricula;
    private String situacaoFrequencia;
    private String situacaoPagamento;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Aluno () {

    }

    public Aluno (int idAlunoIn) {

          this.idAluno = idAlunoIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIdAluno() {
          return this.idAluno;
    }
    public void setIdAluno(int idAlunoIn) {
          this.idAluno = idAlunoIn;
    }

    public String getNome() {
          return this.nome;
    }
    public void setNome(String nomeIn) {
          this.nome = nomeIn;
    }

    public String getMatricula() {
          return this.matricula;
    }
    public void setMatricula(String matriculaIn) {
          this.matricula = matriculaIn;
    }

    public String getSituacaoFrequencia() {
          return this.situacaoFrequencia;
    }
    public void setSituacaoFrequencia(String situacaoFrequenciaIn) {
          this.situacaoFrequencia = situacaoFrequenciaIn;
    }

    public String getSituacaoPagamento() {
          return this.situacaoPagamento;
    }
    public void setSituacaoPagamento(String situacaoPagamentoIn) {
          this.situacaoPagamento = situacaoPagamentoIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int idAlunoIn,
          String nomeIn,
          String matriculaIn,
          String situacaoFrequenciaIn,
          String situacaoPagamentoIn) {
          this.idAluno = idAlunoIn;
          this.nome = nomeIn;
          this.matricula = matriculaIn;
          this.situacaoFrequencia = situacaoFrequenciaIn;
          this.situacaoPagamento = situacaoPagamentoIn;
    }


    /** 
     * hasEqualMapping-method will compare two Aluno instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Aluno valueObject) {

          if (valueObject.getIdAluno() != this.idAluno) {
                    return(false);
          }
          if (this.nome == null) {
                    if (valueObject.getNome() != null)
                           return(false);
          } else if (!this.nome.equals(valueObject.getNome())) {
                    return(false);
          }
          if (this.matricula == null) {
                    if (valueObject.getMatricula() != null)
                           return(false);
          } else if (!this.matricula.equals(valueObject.getMatricula())) {
                    return(false);
          }
          if (this.situacaoFrequencia == null) {
                    if (valueObject.getSituacaoFrequencia() != null)
                           return(false);
          } else if (!this.situacaoFrequencia.equals(valueObject.getSituacaoFrequencia())) {
                    return(false);
          }
          if (this.situacaoPagamento == null) {
                    if (valueObject.getSituacaoPagamento() != null)
                           return(false);
          } else if (!this.situacaoPagamento.equals(valueObject.getSituacaoPagamento())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Aluno, mapping to table aluno\n");
        out.append("Persistent attributes: \n"); 
        out.append("idAluno = " + this.idAluno + "\n"); 
        out.append("nome = " + this.nome + "\n"); 
        out.append("matricula = " + this.matricula + "\n"); 
        out.append("situacaoFrequencia = " + this.situacaoFrequencia + "\n"); 
        out.append("situacaoPagamento = " + this.situacaoPagamento + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Aluno cloned = new Aluno();

        cloned.setIdAluno(this.idAluno); 
        if (this.nome != null)
             cloned.setNome(new String(this.nome)); 
        if (this.matricula != null)
             cloned.setMatricula(new String(this.matricula)); 
        if (this.situacaoFrequencia != null)
             cloned.setSituacaoFrequencia(new String(this.situacaoFrequencia)); 
        if (this.situacaoPagamento != null)
             cloned.setSituacaoPagamento(new String(this.situacaoPagamento)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}


